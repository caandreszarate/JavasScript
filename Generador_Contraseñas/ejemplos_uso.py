#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Ejemplos Pr√°cticos de Uso del Generador de Contrase√±as Seguras
============================================================

Este archivo contiene ejemplos pr√°cticos de c√≥mo integrar y usar
el generador de contrase√±as en diferentes escenarios.
"""

from generador_contrase√±as_seguras import GeneradorContrase√±asSeguras
import json
import csv
from datetime import datetime


def ejemplo_basico():
    """Ejemplo b√°sico de generaci√≥n de contrase√±as."""
    print("=== EJEMPLO 1: USO B√ÅSICO ===")
    
    generador = GeneradorContrase√±asSeguras()
    
    # Generar una contrase√±a simple
    contrase√±a = generador.generar_contrase√±a(14)
    print(f"Contrase√±a generada: {contrase√±a}")
    
    # Evaluar su fortaleza
    evaluacion = generador.evaluar_fortaleza(contrase√±a)
    print(f"Nivel de seguridad: {evaluacion['nivel']} ({evaluacion['puntuacion']:.1f}%)")


def ejemplo_multiples_usuarios():
    """Ejemplo para generar contrase√±as para m√∫ltiples usuarios."""
    print("\n=== EJEMPLO 2: M√öLTIPLES USUARIOS ===")
    
    generador = GeneradorContrase√±asSeguras()
    
    # Lista de usuarios que necesitan contrase√±as
    usuarios = ['juan.perez', 'maria.garcia', 'carlos.lopez', 'ana.rodriguez']
    
    # Generar contrase√±as para cada usuario
    contrase√±as_usuarios = {}
    
    for usuario in usuarios:
        contrase√±a = generador.generar_contrase√±a(16)
        contrase√±as_usuarios[usuario] = {
            'contrase√±a': contrase√±a,
            'fecha_creacion': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'fortaleza': generador.evaluar_fortaleza(contrase√±a)['nivel']
        }
    
    # Mostrar resultados
    print("Contrase√±as generadas para usuarios:")
    for usuario, datos in contrase√±as_usuarios.items():
        print(f"  {usuario}: {datos['contrase√±a']} [{datos['fortaleza']}]")
    
    return contrase√±as_usuarios


def ejemplo_auditoria_seguridad():
    """Ejemplo de auditor√≠a de contrase√±as existentes."""
    print("\n=== EJEMPLO 3: AUDITOR√çA DE SEGURIDAD ===")
    
    generador = GeneradorContrase√±asSeguras()
    
    # Contrase√±as a auditar (ejemplos de contrase√±as d√©biles/fuertes)
    contrase√±as_auditoria = [
        "123456",
        "password",
        "admin123",
        "P@ssw0rd!",
        "MiContrase√±a2024!",
        "qwerty123",
        "X#9mK$4nP&2vQ@8s",
        "usuario",
        "Seg1ur1d@d#2024$"
    ]
    
    print("Resultados de la auditor√≠a:")
    print("-" * 70)
    
    contrase√±as_problematicas = []
    
    for i, contrase√±a in enumerate(contrase√±as_auditoria, 1):
        evaluacion = generador.evaluar_fortaleza(contrase√±a)
        
        estado = "‚úÖ" if evaluacion['puntuacion'] >= 75 else "‚ùå"
        print(f"{i:2}. {contrase√±a:<20} | {evaluacion['nivel']:<12} | {evaluacion['puntuacion']:5.1f}% | {estado}")
        
        if evaluacion['puntuacion'] < 75:
            contrase√±as_problematicas.append({
                'contrase√±a': contrase√±a,
                'puntuacion': evaluacion['puntuacion'],
                'nivel': evaluacion['nivel']
            })
    
    print(f"\nüìä Resumen: {len(contrase√±as_problematicas)} de {len(contrase√±as_auditoria)} contrase√±as necesitan mejoras")
    
    return contrase√±as_problematicas


def ejemplo_diferentes_longitudes():
    """Ejemplo comparando contrase√±as de diferentes longitudes."""
    print("\n=== EJEMPLO 4: COMPARACI√ìN POR LONGITUDES ===")
    
    generador = GeneradorContrase√±asSeguras()
    longitudes = [12, 16, 20, 24, 32]
    
    print("Contrase√±as generadas con diferentes longitudes:")
    print("-" * 80)
    
    for longitud in longitudes:
        contrase√±a = generador.generar_contrase√±a(longitud)
        evaluacion = generador.evaluar_fortaleza(contrase√±a)
        
        print(f"Longitud {longitud:2}: {contrase√±a:<35} [{evaluacion['nivel']}]")


def ejemplo_generacion_masiva():
    """Ejemplo de generaci√≥n masiva de contrase√±as."""
    print("\n=== EJEMPLO 5: GENERACI√ìN MASIVA ===")
    
    generador = GeneradorContrase√±asSeguras()
    
    # Generar 20 contrase√±as
    cantidad = 20
    contrase√±as = generador.generar_multiples_contrase√±as(cantidad, 14)
    
    print(f"Generando {cantidad} contrase√±as seguras:")
    print("-" * 50)
    
    # Agrupar por nivel de fortaleza
    por_nivel = {}
    for i, contrase√±a in enumerate(contrase√±as, 1):
        evaluacion = generador.evaluar_fortaleza(contrase√±a)
        nivel = evaluacion['nivel']
        
        if nivel not in por_nivel:
            por_nivel[nivel] = []
        por_nivel[nivel].append(f"{i:2}. {contrase√±a}")
    
    # Mostrar agrupadas
    for nivel, lista in por_nivel.items():
        print(f"\n{nivel}:")
        for contrase√±a in lista:
            print(f"  {contrase√±a}")


def ejemplo_exportar_csv():
    """Ejemplo de exportaci√≥n de contrase√±as a CSV."""
    print("\n=== EJEMPLO 6: EXPORTACI√ìN A CSV ===")
    
    generador = GeneradorContrase√±asSeguras()
    
    # Generar datos para CSV
    datos = []
    servicios = ['Email', 'Banco', 'Trabajo', 'Redes Sociales', 'Cloud Storage']
    
    for servicio in servicios:
        contrase√±a = generador.generar_contrase√±a(16)
        evaluacion = generador.evaluar_fortaleza(contrase√±a)
        
        datos.append({
            'Servicio': servicio,
            'Contrase√±a': contrase√±a,
            'Longitud': len(contrase√±a),
            'Nivel_Fortaleza': evaluacion['nivel'],
            'Puntuacion': f"{evaluacion['puntuacion']:.1f}%",
            'Fecha_Creacion': datetime.now().strftime('%Y-%m-%d')
        })
    
    # Guardar en CSV
    nombre_archivo = 'contrase√±as_generadas.csv'
    with open(nombre_archivo, 'w', newline='', encoding='utf-8') as archivo:
        escritor = csv.DictWriter(archivo, fieldnames=datos[0].keys())
        escritor.writeheader()
        escritor.writerows(datos)
    
    print(f"‚úÖ Contrase√±as exportadas a: {nombre_archivo}")
    
    # Mostrar vista previa
    print("\nVista previa:")
    for dato in datos:
        print(f"  {dato['Servicio']}: {dato['Contrase√±a']} [{dato['Nivel_Fortaleza']}]")
    
    return nombre_archivo


def ejemplo_exportar_json():
    """Ejemplo de exportaci√≥n de contrase√±as a JSON."""
    print("\n=== EJEMPLO 7: EXPORTACI√ìN A JSON ===")
    
    generador = GeneradorContrase√±asSeguras()
    
    # Crear estructura de datos completa
    datos_json = {
        'generador_info': {
            'version': '1.0',
            'fecha_generacion': datetime.now().isoformat(),
            'total_contrase√±as': 0
        },
        'contrase√±as': []
    }
    
    # Generar contrase√±as para diferentes prop√≥sitos
    prop√≥sitos = [
        {'nombre': 'Administrador_Sistema', 'longitud': 20},
        {'nombre': 'Usuario_Normal', 'longitud': 14},
        {'nombre': 'API_Token', 'longitud': 32},
        {'nombre': 'Base_Datos', 'longitud': 18},
        {'nombre': 'Backup_Seguridad', 'longitud': 24}
    ]
    
    for prop√≥sito in prop√≥sitos:
        contrase√±a = generador.generar_contrase√±a(prop√≥sito['longitud'])
        evaluacion = generador.evaluar_fortaleza(contrase√±a)
        
        datos_json['contrase√±as'].append({
            'id': len(datos_json['contrase√±as']) + 1,
            'prop√≥sito': prop√≥sito['nombre'],
            'contrase√±a': contrase√±a,
            'longitud': prop√≥sito['longitud'],
            'evaluacion': evaluacion,
            'fecha_creacion': datetime.now().isoformat()
        })
    
    datos_json['generador_info']['total_contrase√±as'] = len(datos_json['contrase√±as'])
    
    # Guardar en JSON
    nombre_archivo = 'contrase√±as_seguras.json'
    with open(nombre_archivo, 'w', encoding='utf-8') as archivo:
        json.dump(datos_json, archivo, indent=2, ensure_ascii=False)
    
    print(f"‚úÖ Datos exportados a: {nombre_archivo}")
    print(f"üìä Total de contrase√±as generadas: {datos_json['generador_info']['total_contrase√±as']}")
    
    return nombre_archivo


def ejemplo_validacion_personalizada():
    """Ejemplo con validaciones personalizadas."""
    print("\n=== EJEMPLO 8: VALIDACI√ìN PERSONALIZADA ===")
    
    class ValidadorPersonalizado(GeneradorContrase√±asSeguras):
        """Generador con validaciones personalizadas."""
        
        def validar_requisitos_empresa(self, contrase√±a):
            """Validaciones espec√≠ficas de una empresa ficticia."""
            validaciones = {
                'longitud_minima_16': len(contrase√±a) >= 16,
                'no_caracteres_ambiguos': not any(c in '0O1lI' for c in contrase√±a),
                'al_menos_3_mayusculas': sum(1 for c in contrase√±a if c.isupper()) >= 3,
                'al_menos_3_especiales': sum(1 for c in contrase√±a if c in self.especiales) >= 3,
                'no_secuencias_4_chars': not self._tiene_secuencias_largas(contrase√±a, 4)
            }
            
            return validaciones
        
        def _tiene_secuencias_largas(self, contrase√±a, longitud_max):
            """Verifica secuencias de caracteres consecutivos."""
            for i in range(len(contrase√±a) - longitud_max + 1):
                subcadena = contrase√±a[i:i + longitud_max]
                # Verificar secuencia num√©rica
                if subcadena.isdigit():
                    numeros = [int(c) for c in subcadena]
                    if all(numeros[j] == numeros[j-1] + 1 for j in range(1, len(numeros))):
                        return True
                # Verificar secuencia alfab√©tica
                elif subcadena.isalpha():
                    if all(ord(subcadena[j]) == ord(subcadena[j-1]) + 1 for j in range(1, len(subcadena))):
                        return True
            return False
    
    # Usar el validador personalizado
    generador_custom = ValidadorPersonalizado()
    
    print("Generando contrase√±as con validaciones empresariales:")
    for i in range(3):
        contrase√±a = generador_custom.generar_contrase√±a(18)
        validacion_std = generador_custom.evaluar_fortaleza(contrase√±a)
        validacion_custom = generador_custom.validar_requisitos_empresa(contrase√±a)
        
        print(f"\nContrase√±a {i+1}: {contrase√±a}")
        print(f"  Evaluaci√≥n est√°ndar: {validacion_std['nivel']}")
        print(f"  Validaciones empresariales:")
        
        for criterio, cumple in validacion_custom.items():
            simbolo = "‚úÖ" if cumple else "‚ùå"
            criterio_legible = criterio.replace('_', ' ').title()
            print(f"    {simbolo} {criterio_legible}")


def main():
    """Ejecuta todos los ejemplos de uso."""
    print("üîê EJEMPLOS PR√ÅCTICOS DEL GENERADOR DE CONTRASE√ëAS SEGURAS")
    print("=" * 80)
    
    try:
        ejemplo_basico()
        ejemplo_multiples_usuarios()
        ejemplo_auditoria_seguridad()
        ejemplo_diferentes_longitudes()
        ejemplo_generacion_masiva()
        
        # Ejemplos de exportaci√≥n
        archivo_csv = ejemplo_exportar_csv()
        archivo_json = ejemplo_exportar_json()
        
        ejemplo_validacion_personalizada()
        
        print(f"\n‚úÖ Todos los ejemplos ejecutados correctamente!")
        print(f"üìÅ Archivos generados:")
        print(f"   ‚Ä¢ {archivo_csv}")
        print(f"   ‚Ä¢ {archivo_json}")
        
    except Exception as e:
        print(f"‚ùå Error durante la ejecuci√≥n: {e}")


if __name__ == "__main__":
    main()