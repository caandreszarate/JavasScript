#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Generador Interactivo de Contrase√±as Seguras
===========================================

Script interactivo que permite al usuario personalizar la generaci√≥n de contrase√±as.
"""

from generador_contrase√±as_seguras import GeneradorContrase√±asSeguras
import sys


def mostrar_menu():
    """Muestra el men√∫ principal."""
    print("\n" + "="*50)
    print("   GENERADOR INTERACTIVO DE CONTRASE√ëAS")
    print("="*50)
    print("1. Generar una contrase√±a personalizada")
    print("2. Generar m√∫ltiples contrase√±as")
    print("3. Evaluar una contrase√±a existente")
    print("4. Configurar caracteres personalizados")
    print("5. Mostrar consejos de seguridad")
    print("0. Salir")
    print("-" * 50)


def solicitar_longitud():
    """Solicita la longitud de la contrase√±a al usuario."""
    while True:
        try:
            longitud = int(input("Ingresa la longitud deseada (m√≠nimo 12): "))
            if longitud < 12:
                print("‚ùå Error: La longitud m√≠nima es de 12 caracteres.")
                continue
            if longitud > 128:
                print("‚ö†Ô∏è  Advertencia: Longitudes muy grandes pueden ser innecesarias.")
                confirmar = input("¬øContinuar? (s/n): ").lower()
                if confirmar != 's':
                    continue
            return longitud
        except ValueError:
            print("‚ùå Error: Por favor ingresa un n√∫mero v√°lido.")


def solicitar_cantidad():
    """Solicita la cantidad de contrase√±as a generar."""
    while True:
        try:
            cantidad = int(input("¬øCu√°ntas contrase√±as generar? (1-20): "))
            if 1 <= cantidad <= 20:
                return cantidad
            else:
                print("‚ùå Error: Ingresa un n√∫mero entre 1 y 20.")
        except ValueError:
            print("‚ùå Error: Por favor ingresa un n√∫mero v√°lido.")


def generar_contrase√±a_personalizada(generador):
    """Genera una contrase√±a con par√°metros personalizados."""
    print("\n--- GENERACI√ìN PERSONALIZADA ---")
    
    longitud = solicitar_longitud()
    
    print(f"\nüîÑ Generando contrase√±a de {longitud} caracteres...")
    try:
        contrase√±a = generador.generar_contrase√±a(longitud)
        evaluacion = generador.evaluar_fortaleza(contrase√±a)
        
        print(f"\n‚úÖ Contrase√±a generada: {contrase√±a}")
        print(f"üîí Nivel de seguridad: {evaluacion['nivel']} ({evaluacion['puntuacion']:.1f}%)")
        
        # Mostrar detalles de la evaluaci√≥n
        print("\nüìä Detalles de la evaluaci√≥n:")
        criterios = [
            ("Longitud suficiente", evaluacion['longitud_suficiente']),
            ("Contiene may√∫sculas", evaluacion['tiene_mayusculas']),
            ("Contiene min√∫sculas", evaluacion['tiene_minusculas']),
            ("Contiene n√∫meros", evaluacion['tiene_numeros']),
            ("Contiene especiales", evaluacion['tiene_especiales']),
            ("Sin secuencias obvias", evaluacion['sin_secuencias_prohibidas']),
            ("Sin palabras comunes", evaluacion['sin_palabras_comunes']),
            ("Sin repeticiones", evaluacion['sin_repeticiones_excesivas'])
        ]
        
        for criterio, cumple in criterios:
            simbolo = "‚úÖ" if cumple else "‚ùå"
            print(f"   {simbolo} {criterio}")
            
    except Exception as e:
        print(f"‚ùå Error al generar contrase√±a: {e}")


def generar_multiples_contrase√±as(generador):
    """Genera m√∫ltiples contrase√±as."""
    print("\n--- GENERACI√ìN M√öLTIPLE ---")
    
    longitud = solicitar_longitud()
    cantidad = solicitar_cantidad()
    
    print(f"\nüîÑ Generando {cantidad} contrase√±as de {longitud} caracteres...")
    
    try:
        contrase√±as = generador.generar_multiples_contrase√±as(cantidad, longitud)
        
        print(f"\n‚úÖ Contrase√±as generadas:")
        print("-" * 60)
        
        for i, contrase√±a in enumerate(contrase√±as, 1):
            evaluacion = generador.evaluar_fortaleza(contrase√±a)
            print(f"{i:2}. {contrase√±a:<30} [{evaluacion['nivel']}]")
            
    except Exception as e:
        print(f"‚ùå Error al generar contrase√±as: {e}")


def evaluar_contrase√±a_existente(generador):
    """Eval√∫a una contrase√±a proporcionada por el usuario."""
    print("\n--- EVALUACI√ìN DE CONTRASE√ëA ---")
    
    contrase√±a = input("Ingresa la contrase√±a a evaluar: ")
    
    if not contrase√±a.strip():
        print("‚ùå Error: No se ingres√≥ ninguna contrase√±a.")
        return
    
    evaluacion = generador.evaluar_fortaleza(contrase√±a)
    
    print(f"\nüìä Evaluaci√≥n de la contrase√±a: '{contrase√±a}'")
    print(f"üîí Nivel de seguridad: {evaluacion['nivel']} ({evaluacion['puntuacion']:.1f}%)")
    
    print("\nüìã Detalles:")
    criterios = [
        ("Longitud suficiente (‚â•12)", evaluacion['longitud_suficiente']),
        ("Contiene may√∫sculas", evaluacion['tiene_mayusculas']),
        ("Contiene min√∫sculas", evaluacion['tiene_minusculas']),
        ("Contiene n√∫meros", evaluacion['tiene_numeros']),
        ("Contiene especiales", evaluacion['tiene_especiales']),
        ("Sin secuencias obvias", evaluacion['sin_secuencias_prohibidas']),
        ("Sin palabras comunes", evaluacion['sin_palabras_comunes']),
        ("Sin repeticiones excesivas", evaluacion['sin_repeticiones_excesivas'])
    ]
    
    for criterio, cumple in criterios:
        simbolo = "‚úÖ" if cumple else "‚ùå"
        print(f"   {simbolo} {criterio}")
    
    # Sugerencias de mejora
    if evaluacion['puntuacion'] < 100:
        print("\nüí° Sugerencias de mejora:")
        if not evaluacion['longitud_suficiente']:
            print("   ‚Ä¢ Aumenta la longitud a al menos 12 caracteres")
        if not evaluacion['tiene_mayusculas']:
            print("   ‚Ä¢ A√±ade al menos una letra may√∫scula")
        if not evaluacion['tiene_minusculas']:
            print("   ‚Ä¢ A√±ade al menos una letra min√∫scula")
        if not evaluacion['tiene_numeros']:
            print("   ‚Ä¢ A√±ade al menos un n√∫mero")
        if not evaluacion['tiene_especiales']:
            print("   ‚Ä¢ A√±ade al menos un car√°cter especial (!@#$%^&*)")
        if not evaluacion['sin_secuencias_prohibidas']:
            print("   ‚Ä¢ Evita secuencias como 'abc', '123', 'qwerty'")
        if not evaluacion['sin_palabras_comunes']:
            print("   ‚Ä¢ Evita palabras comunes como 'password', 'admin'")
        if not evaluacion['sin_repeticiones_excesivas']:
            print("   ‚Ä¢ Evita repetir el mismo car√°cter consecutivamente")


def mostrar_consejos_seguridad():
    """Muestra consejos de seguridad para contrase√±as."""
    print("\n" + "="*60)
    print("           CONSEJOS DE SEGURIDAD PARA CONTRASE√ëAS")
    print("="*60)
    
    consejos = [
        "üîê Usa al menos 12 caracteres (mejor 16 o m√°s)",
        "üî§ Combina may√∫sculas, min√∫sculas, n√∫meros y s√≠mbolos",
        "üö´ Evita informaci√≥n personal (nombres, fechas, direcciones)",
        "üîÑ Usa contrase√±as √∫nicas para cada cuenta importante",
        "üì± Considera usar un gestor de contrase√±as",
        "üîí Activa la autenticaci√≥n de dos factores cuando sea posible",
        "‚è∞ Cambia contrase√±as importantes cada 3-6 meses",
        "üëÄ No compartas contrase√±as ni las escribas en lugares visibles",
        "üåê Ten especial cuidado con las contrase√±as en redes p√∫blicas",
        "üíæ Haz copias de seguridad de tus contrase√±as de forma segura"
    ]
    
    for i, consejo in enumerate(consejos, 1):
        print(f"{i:2}. {consejo}")
    
    print("\n" + "="*60)
    print("   ¬°Recuerda: Una buena contrase√±a es tu primera l√≠nea de defensa!")
    print("="*60)


def configurar_caracteres_personalizados(generador):
    """Permite personalizar los conjuntos de caracteres (funcionalidad futura)."""
    print("\n--- CONFIGURACI√ìN PERSONALIZADA ---")
    print("üöß Esta funcionalidad estar√° disponible en una versi√≥n futura.")
    print("üìß Env√≠a sugerencias sobre qu√© configuraciones te gustar√≠a tener.")
    
    print(f"\nConfiguraci√≥n actual:")
    print(f"‚Ä¢ May√∫sculas: {generador.mayusculas}")
    print(f"‚Ä¢ Min√∫sculas: {generador.minusculas}")
    print(f"‚Ä¢ N√∫meros: {generador.numeros}")
    print(f"‚Ä¢ Especiales: {generador.especiales}")


def main():
    """Funci√≥n principal del programa interactivo."""
    generador = GeneradorContrase√±asSeguras()
    
    print("¬°Bienvenido al Generador de Contrase√±as Seguras! üîê")
    
    while True:
        mostrar_menu()
        
        try:
            opcion = input("Selecciona una opci√≥n (0-5): ").strip()
            
            if opcion == "1":
                generar_contrase√±a_personalizada(generador)
            elif opcion == "2":
                generar_multiples_contrase√±as(generador)
            elif opcion == "3":
                evaluar_contrase√±a_existente(generador)
            elif opcion == "4":
                configurar_caracteres_personalizados(generador)
            elif opcion == "5":
                mostrar_consejos_seguridad()
            elif opcion == "0":
                print("\nüëã ¬°Gracias por usar el Generador de Contrase√±as Seguras!")
                print("üîí Recuerda mantener tus contrase√±as seguras y privadas.")
                sys.exit(0)
            else:
                print("‚ùå Opci√≥n no v√°lida. Por favor selecciona una opci√≥n del 0 al 5.")
                
        except KeyboardInterrupt:
            print("\n\nüëã ¬°Hasta luego!")
            sys.exit(0)
        except Exception as e:
            print(f"‚ùå Error inesperado: {e}")
            
        input("\nPresiona Enter para continuar...")


if __name__ == "__main__":
    main()