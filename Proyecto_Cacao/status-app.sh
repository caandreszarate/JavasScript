#!/bin/bash

# Script para verificar estado de CacaoControl
echo "üìä Estado de CacaoControl - Sistema de Gesti√≥n de Cultivo de Cacao"
echo "üìç Granada, Meta, Colombia"
echo "üìÖ $(date)"
echo ""

# Funci√≥n para mostrar estado con colores
show_status() {
    if [ $1 -eq 0 ]; then
        echo "‚úÖ $2"
    else
        echo "‚ùå $3"
    fi
}

# Verificar directorio
echo "üìÅ Directorio de trabajo:"
echo "   $(pwd)"
if [ -f "package.json" ]; then
    echo "‚úÖ En directorio correcto del proyecto"
else
    echo "‚ùå No est√°s en el directorio del proyecto"
    echo "üí° Ve a: /Users/carlosmartinez/Documents/JavasScript/Proyecto_Cacao"
fi
echo ""

# Verificar MongoDB
echo "üóÑÔ∏è MongoDB:"
if brew services list | grep -q "mongodb-community.*started"; then
    echo "‚úÖ MongoDB ejecut√°ndose"
    # Probar conexi√≥n
    if mongosh --eval "db.adminCommand('ismaster')" > /dev/null 2>&1; then
        echo "‚úÖ MongoDB respondiendo"
    else
        echo "‚ö†Ô∏è MongoDB iniciado pero no responde"
    fi
else
    echo "‚ùå MongoDB no est√° ejecut√°ndose"
    echo "üí° Ejecuta: brew services start mongodb/brew/mongodb-community"
fi
echo ""

# Verificar Backend
echo "‚öôÔ∏è Backend (Puerto 8000):"
if lsof -i :8000 > /dev/null 2>&1; then
    echo "‚úÖ Puerto 8000 ocupado"
    
    # Verificar si responde
    if curl -s http://localhost:8000/api/health > /dev/null; then
        echo "‚úÖ Backend respondiendo"
        
        # Mostrar informaci√≥n del health check
        HEALTH_INFO=$(curl -s http://localhost:8000/api/health)
        echo "üìã Info: $(echo $HEALTH_INFO | grep -o '"message":"[^"]*"' | cut -d'"' -f4)"
        echo "üî¢ Versi√≥n: $(echo $HEALTH_INFO | grep -o '"version":"[^"]*"' | cut -d'"' -f4)"
    else
        echo "‚ùå Puerto ocupado pero backend no responde"
    fi
    
    # Mostrar PID del proceso
    BACKEND_PID=$(lsof -ti :8000)
    echo "üìù PID: $BACKEND_PID"
else
    echo "‚ùå Backend no est√° ejecut√°ndose"
    echo "üí° Ejecuta: node server/index.js &"
fi
echo ""

# Verificar Frontend
echo "üé® Frontend (Puerto 3000):"
if lsof -i :3000 > /dev/null 2>&1; then
    echo "‚úÖ Puerto 3000 ocupado"
    
    # Verificar si responde
    if curl -s -I http://localhost:3000 | head -1 | grep -q "200"; then
        echo "‚úÖ Frontend respondiendo"
    else
        echo "‚ö†Ô∏è Puerto ocupado pero frontend no responde completamente"
    fi
    
    # Mostrar PID del proceso
    FRONTEND_PID=$(lsof -ti :3000)
    echo "üìù PID: $FRONTEND_PID"
else
    echo "‚ùå Frontend no est√° ejecut√°ndose"
    echo "üí° Ejecuta: cd client && npm start"
fi
echo ""

# Verificar procesos de Node.js relacionados
echo "üîç Procesos de Node.js activos:"
NODE_PROCESSES=$(ps aux | grep -E "(node.*server|craco.*start)" | grep -v grep)
if [ -n "$NODE_PROCESSES" ]; then
    echo "$NODE_PROCESSES" | while read line; do
        echo "   üìã $line"
    done
else
    echo "   ‚ÑπÔ∏è No hay procesos de Node.js relacionados ejecut√°ndose"
fi
echo ""

# Resumen de URLs
echo "üåê URLs de Acceso:"
echo "   üì± Aplicaci√≥n Web: http://localhost:3000"
echo "   ‚öôÔ∏è API Backend: http://localhost:8000"
echo "   ü©∫ Health Check: http://localhost:8000/api/health"
echo ""

# Estado general
echo "üìä Resumen General:"
MONGODB_OK=$(brew services list | grep -q "mongodb-community.*started" && echo 0 || echo 1)
BACKEND_OK=$(curl -s http://localhost:8000/api/health > /dev/null && echo 0 || echo 1)
FRONTEND_OK=$(curl -s -I http://localhost:3000 | head -1 | grep -q "200" && echo 0 || echo 1)

show_status $MONGODB_OK "MongoDB funcionando" "MongoDB no disponible"
show_status $BACKEND_OK "Backend funcionando" "Backend no disponible"
show_status $FRONTEND_OK "Frontend funcionando" "Frontend no disponible"

if [ $MONGODB_OK -eq 0 ] && [ $BACKEND_OK -eq 0 ] && [ $FRONTEND_OK -eq 0 ]; then
    echo ""
    echo "üéâ ¬°Todos los servicios funcionando correctamente!"
    echo "üîë Credenciales: admin@cacaocontrol.com / admin123"
else
    echo ""
    echo "‚ö†Ô∏è Algunos servicios necesitan atenci√≥n"
    echo "üí° Ejecuta: ./start-app.sh para iniciar todos los servicios"
fi
echo ""
